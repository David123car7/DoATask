generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Address {
  id         Int     @id @default(autoincrement())
  port       Int?
  street     String?
  postalCode String?
  userId     String?
  user       user?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Community {
  id            Int             @id @default(autoincrement())
  localityId    Int
  communityName String
  creatorId     String
  Locality      Locality        @relation(fields: [localityId], references: [id])
  Store         Store[]
  UserCommunity UserCommunity[]
  member        member[]
}

model Contact {
  id     Int    @id @default(autoincrement())
  number String
  user   user[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Image {
  id        Int    @id @default(autoincrement())
  imagePath String
  Item      Item[]
  Task      Task[]
}

model Item {
  id        Int        @id @default(autoincrement())
  name      String
  price     Int
  storeId   Int?
  stock     Int
  available Boolean
  imageId   Int
  Image     Image      @relation(fields: [imageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Store     Store?     @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Item_storeId_fkey1")
  Purchase  Purchase[]
}

model Locality {
  id              Int         @id @default(autoincrement())
  name            String?
  maxPostalNumber String
  minPostalNumber String
  Community       Community[]
}

model MemberTask {
  id          Int       @id @default(autoincrement())
  status      String
  assignedAt  DateTime?
  completedAt DateTime?
  volunteerId Int?
  taskId      Int
  score       Int?
  Task        Task      @relation(fields: [taskId], references: [id])
  member      member?   @relation(fields: [volunteerId], references: [id], onDelete: Restrict)
}

model Notification {
  id          Int       @id @default(autoincrement())
  title       String
  message     String
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  recipientId String
  updatedAt   DateTime? @db.Timestamptz(6)
  user        user      @relation(fields: [recipientId], references: [id])
}

model PointsMember {
  id       Int    @id @default(autoincrement())
  points   Int?
  memberId Int
  member   member @relation(fields: [memberId], references: [id])
}

model PostalCode {
  id              Int    @id @default(autoincrement())
  maxPostalNumber String
  minPostalNumber String
}

model Purchase {
  id         Int       @id @default(autoincrement())
  date       DateTime?
  totalPrice Int?
  memberId   Int
  itemId     Int
  Item       Item      @relation(fields: [itemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  member     member    @relation(fields: [memberId], references: [id])
}

model Store {
  id          Int       @id @default(autoincrement())
  communityId Int
  Item        Item[]
  Community   Community @relation(fields: [communityId], references: [id])
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String
  difficulty  Int?
  creatorId   Int
  coins       Int?
  points      Int?
  location    String
  description String
  imageId     Int
  MemberTask  MemberTask[]
  member      member       @relation(fields: [creatorId], references: [id])
  Image       Image        @relation(fields: [imageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model UserCommunity {
  id          Int       @id @default(autoincrement())
  joinedAt    DateTime?
  userId      String
  communityId Int
  Community   Community @relation(fields: [communityId], references: [id])
  user        user      @relation(fields: [userId], references: [id])
}

model member {
  id           Int            @id @default(autoincrement())
  userId       String
  communityId  Int
  coins        Int
  MemberTask   MemberTask[]
  PointsMember PointsMember[]
  Purchase     Purchase[]
  Task         Task[]
  Community    Community      @relation(fields: [communityId], references: [id])
  user         user           @relation(fields: [userId], references: [id])
}

model user {
  id            String          @id
  createdAt     DateTime
  updatedAt     DateTime
  name          String
  birthDate     DateTime
  contactId     Int
  email         String          @unique @default("default@example.com")
  Address       Address[]
  Notification  Notification[]
  UserCommunity UserCommunity[]
  member        member[]
  Contact       Contact         @relation(fields: [contactId], references: [id])
}

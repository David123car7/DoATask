generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Member {
  id           Int            @id @default(autoincrement())
  user         User           @relation(fields: [userId], references: [id])
  address      Address        @relation(fields: [addressId], references: [id])
  community    Community      @relation(fields: [communityId], references: [id])
  tasks        MemberTask[]
  purchases    Purchase[]
  points       PointsMember[]
  createdTasks Task[]         @relation("MemberTasks")

  userId      Int
  addressId   Int
  communityId Int

  @@map("member")
}

model User {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime
  updatedAt       DateTime
  name            String
  birthDate       DateTime
  totalCoins      Int
  contact      Contact       @relation(fields: [contactId], references: [id])
  members         Member[]
  userCommunities UserCommunity[]

  contactId   Int
  @@map("user")
}

model Community {
  id              Int             @id @default(autoincrement())
  name            String?
  locality        Locality        @relation(fields: [localityId], references: [id])
  members         Member[]
  userCommunities UserCommunity[]
  stores          Store[]

  localityId Int
}

model Locality {
  id          Int          @id @default(autoincrement())
  name        String?
  communities Community[]
  postalCodes PostalCode[]
}

model Address {
  id      Int      @id @default(autoincrement())
  port    Int?
  street  String?
  members Member[]
}

model Contact {
  id     Int      @id @default(autoincrement())
  number String
  users User[]
}

model Store {
  id        Int         @id @default(autoincrement())
  name      String
  community Community   @relation(fields: [communityId], references: [id])
  items     StoreItem[]

  communityId Int
}

model PostalCode {
  id           Int      @id @default(autoincrement())
  neighborhood String?
  locality     Locality @relation(fields: [localityId], references: [id])

  localityId Int
}

model Task {
  id         Int          @id @default(autoincrement())
  title      String
  difficulty String?
  coins      String?
  points     String?
  creator    Member       @relation(fields: [creatorId], references: [id], name: "MemberTasks")
  members    MemberTask[]

  creatorId Int
}

model MemberTask {
  id          Int       @id @default(autoincrement())
  status      String
  assignedAt  DateTime
  completedAt DateTime?
  score       Int
  volunteer   Member    @relation(fields: [volunteerId], references: [id])
  task        Task      @relation(fields: [taskId], references: [id])

  volunteerId Int
  taskId      Int
}

model Item {
  id            Int            @id @default(autoincrement())
  name          String?
  price         Int?
  storeItems    StoreItem[]
  purchaseItems PurchaseItem[]
}

model Purchase {
  id         Int       @id @default(autoincrement())
  member     Member    @relation(fields: [memberId], references: [id])
  date       DateTime?
  totalPrice Int?

  memberId Int
  items    PurchaseItem[]
}

model StoreItem {
  id    Int   @id @default(autoincrement())
  store Store @relation(fields: [storeId], references: [id])
  item  Item  @relation(fields: [itemId], references: [id])

  storeId Int
  itemId  Int
}

model PurchaseItem {
  id              Int      @id @default(autoincrement())
  purchase        Purchase @relation(fields: [purchaseId], references: [id])
  item            Item     @relation(fields: [itemId], references: [id])
  quantity        Int?
  priceAtPurchase Int?

  purchaseId Int
  itemId     Int
}

model UserCommunity {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id])
  community Community @relation(fields: [communityId], references: [id])
  joinedAt  DateTime?

  userId      Int
  communityId Int
}

model PointsMember {
  id     Int    @id @default(autoincrement())
  points Int?
  member Member @relation(fields: [memberId], references: [id])

  memberId Int
}
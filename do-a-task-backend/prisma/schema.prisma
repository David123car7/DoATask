generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Address {
  id     Int      @id @default(autoincrement())
  port   Int?
  street String?
  member member[]
}

model Community {
  id            Int             @id @default(autoincrement())
  name          String?
  localityId    Int
  Locality      Locality        @relation(fields: [localityId], references: [id])
  Store         Store[]
  UserCommunity UserCommunity[]
  member        member[]
}

model Contact {
  id     Int    @id @default(autoincrement())
  number String
  user   user[]
}

model Item {
  id           Int            @id @default(autoincrement())
  name         String?
  price        Int?
  PurchaseItem PurchaseItem[]
  StoreItem    StoreItem[]
}

model Locality {
  id         Int          @id @default(autoincrement())
  name       String?
  Community  Community[]
  PostalCode PostalCode[]
}

model MemberTask {
  id          Int       @id @default(autoincrement())
  status      String?
  assignedAt  DateTime?
  completedAt DateTime?
  volunteerId Int
  taskId      Int
  Task        Task      @relation(fields: [taskId], references: [id])
  member      member    @relation(fields: [volunteerId], references: [id])
}

model PointsMember {
  id       Int    @id @default(autoincrement())
  points   Int?
  memberId Int
  member   member @relation(fields: [memberId], references: [id])
}

model PostalCode {
  id           Int      @id @default(autoincrement())
  neighborhood String?
  localityId   Int
  Locality     Locality @relation(fields: [localityId], references: [id])
}

model Purchase {
  id           Int            @id @default(autoincrement())
  date         DateTime?
  totalPrice   Int?
  memberId     Int
  member       member         @relation(fields: [memberId], references: [id])
  PurchaseItem PurchaseItem[]
}

model PurchaseItem {
  id              Int      @id @default(autoincrement())
  quantity        Int?
  priceAtPurchase Int?
  purchaseId      Int
  itemId          Int
  Item            Item     @relation(fields: [itemId], references: [id])
  Purchase        Purchase @relation(fields: [purchaseId], references: [id])
}

model Store {
  id          Int         @id @default(autoincrement())
  name        String
  communityId Int
  Community   Community   @relation(fields: [communityId], references: [id])
  StoreItem   StoreItem[]
}

model StoreItem {
  id      Int   @id @default(autoincrement())
  storeId Int
  itemId  Int
  Item    Item  @relation(fields: [itemId], references: [id])
  Store   Store @relation(fields: [storeId], references: [id])
}

model Task {
  id         Int          @id @default(autoincrement())
  title      String?
  difficulty Int?
  coins      Int?
  points     Int?
  creatorId  Int
  MemberTask MemberTask[]
  member     member       @relation(fields: [creatorId], references: [id])
}

model UserCommunity {
  id          Int       @id @default(autoincrement())
  joinedAt    DateTime?
  userId      Int
  communityId Int
  Community   Community @relation(fields: [communityId], references: [id])
  user        user      @relation(fields: [userId], references: [id])
}

model member {
  id           Int            @id @default(autoincrement())
  userId       Int
  addressId    Int
  communityId  Int
  MemberTask   MemberTask[]
  PointsMember PointsMember[]
  Purchase     Purchase[]
  Task         Task[]
  Address      Address        @relation(fields: [addressId], references: [id])
  Community    Community      @relation(fields: [communityId], references: [id])
  user         user           @relation(fields: [userId], references: [id])
}

model user {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime
  updatedAt     DateTime
  name          String
  birthDate     DateTime
  totalCoins    Int
  contactId     Int
  UserCommunity UserCommunity[]
  member        member[]
  Contact       Contact         @relation(fields: [contactId], references: [id])
}

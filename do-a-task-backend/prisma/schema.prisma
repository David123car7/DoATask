generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Member {
  id           Int            @id @default(autoincrement())
  userId       Int
  addressId    Int
  communityId  Int
  tasks        MemberTask[]
  points       PointsMember[]
  purchases    Purchase[]
  createdTasks Task[]         @relation("MemberTasks")
  address      Address        @relation(fields: [addressId], references: [id])
  community    Community      @relation(fields: [communityId], references: [id])
  user         User           @relation(fields: [userId], references: [id])

  @@map("member")
}

model User {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime
  updatedAt       DateTime
  name            String
  birthDate       DateTime
  totalCoins      Int
  contactId       Int
  email           String          @unique @default("default@example.com")
  Notification    Notification[]
  userCommunities UserCommunity[]
  members         Member[]
  contact         Contact         @relation(fields: [contactId], references: [id])

  @@map("user")
}

model Notification {
  id          Int      @id @default(autoincrement())
  title       String
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  recipientId Int
  recipient   User     @relation(fields: [recipientId], references: [id])
}

model Community {
  id              Int             @id @default(autoincrement())
  name            String?
  localityId      Int
  locality        Locality        @relation(fields: [localityId], references: [id])
  stores          Store[]
  userCommunities UserCommunity[]
  members         Member[]

  StreetCommunity StreetCommunity[]
}

model Locality {
  id          Int          @id @default(autoincrement())
  name        String?
  communities Community[]
  postalCodes PostalCode[]
}

model Address {
  id      Int      @id @default(autoincrement())
  port    Int?
  street  String?
  members Member[]
}

model StreetCommunity {
  id           Int       @id @default(autoincrement())
  street       String?
  communityId  Int
  community    Community @relation(fields: [communityId], references: [id])
}

model Contact {
  id     Int    @id @default(autoincrement())
  number String
  users  User[]
}

model Store {
  id          Int         @id @default(autoincrement())
  name        String
  communityId Int
  community   Community   @relation(fields: [communityId], references: [id])
  items       StoreItem[]
}

model PostalCode {
  id           Int      @id @default(autoincrement())
  neighborhood String?
  localityId   Int
  locality     Locality @relation(fields: [localityId], references: [id])
}

model Task {
  id         Int          @id @default(autoincrement())
  title      String
  difficulty String?
  creatorId  Int
  coins      Int?
  points     Int?
  members    MemberTask[]
  creator    Member       @relation("MemberTasks", fields: [creatorId], references: [id])
}

model MemberTask {
  id          Int       @id @default(autoincrement())
  status      String
  assignedAt  DateTime
  completedAt DateTime?
  volunteerId Int
  taskId      Int
  score       Int
  task        Task      @relation(fields: [taskId], references: [id])
  volunteer   Member    @relation(fields: [volunteerId], references: [id])
}

model Item {
  id            Int            @id @default(autoincrement())
  name          String?
  price         Int?
  purchaseItems PurchaseItem[]
  storeItems    StoreItem[]
}

model Purchase {
  id         Int            @id @default(autoincrement())
  date       DateTime?
  totalPrice Int?
  memberId   Int
  member     Member         @relation(fields: [memberId], references: [id])
  items      PurchaseItem[]
}

model StoreItem {
  id      Int   @id @default(autoincrement())
  storeId Int
  itemId  Int
  item    Item  @relation(fields: [itemId], references: [id])
  store   Store @relation(fields: [storeId], references: [id])
}

model PurchaseItem {
  id              Int      @id @default(autoincrement())
  quantity        Int?
  priceAtPurchase Int?
  purchaseId      Int
  itemId          Int
  item            Item     @relation(fields: [itemId], references: [id])
  purchase        Purchase @relation(fields: [purchaseId], references: [id])
}

model UserCommunity {
  id          Int       @id @default(autoincrement())
  joinedAt    DateTime?
  userId      Int
  communityId Int
  community   Community @relation(fields: [communityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model PointsMember {
  id       Int    @id @default(autoincrement())
  points   Int?
  memberId Int
  member   Member @relation(fields: [memberId], references: [id])
}

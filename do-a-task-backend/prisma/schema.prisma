generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Member {
  id           Int            @id @default(autoincrement())
  userId       String
  communityId  Int
  coins        Int
  tasks        MemberTask[]
  points       PointsMember[]
  purchases    Purchase[]
  createdTasks Task[]         @relation("MemberTasks")
  community    Community      @relation(fields: [communityId], references: [id])
  user         User           @relation(fields: [userId], references: [id])

  @@map("member")
}

model User {
  id              String          @id
  createdAt       DateTime
  updatedAt       DateTime
  name            String
  birthDate       DateTime
  totalCoins      Int
  contactId       Int
  email           String          @unique @default("default@example.com")
  Address         Address[]
  Notification    Notification[]
  userCommunities UserCommunity[]
  members         Member[]
  contact         Contact         @relation(fields: [contactId], references: [id])

  @@map("user")
}

model Notification {
  id          Int      @id @default(autoincrement())
  title       String
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  recipientId String
  recipient   User     @relation(fields: [recipientId], references: [id])
}

model Community {
  id              Int             @id @default(autoincrement())
  localityId      Int
  communityName   String
  creatorId       String
  locality        Locality        @relation(fields: [localityId], references: [id])
  stores          Store[]
  userCommunities UserCommunity[]
  members         Member[]
}

model Locality {
  id              Int         @id @default(autoincrement())
  name            String?
  maxPostalNumber String
  minPostalNumber String
  communities     Community[]
}

model Address {
  id         Int     @id @default(autoincrement())
  port       Int?
  street     String?
  postalCode String?
  userId     String?
  user       User?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Contact {
  id     Int    @id @default(autoincrement())
  number String
  users  User[]
}

model Store {
  id          Int       @id @default(autoincrement())
  communityId Int
  Item        Item[]
  community   Community @relation(fields: [communityId], references: [id])
}

model PostalCode {
  id              Int    @id @default(autoincrement())
  maxPostalNumber String
  minPostalNumber String
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String
  difficulty  Int?
  creatorId   Int
  coins       Int?
  points      Int?
  location    String
  description String
  members     MemberTask[]
  creator     Member       @relation("MemberTasks", fields: [creatorId], references: [id])
}

model MemberTask {
  id          Int       @id @default(autoincrement())
  status      String
  assignedAt  DateTime?
  completedAt DateTime?
  volunteerId Int?
  taskId      Int
  score       Int?
  task        Task      @relation(fields: [taskId], references: [id])
  volunteer   Member?   @relation(fields: [volunteerId], references: [id], onDelete: Restrict)
}

model Item {
  id        Int        @id @default(autoincrement())
  name      String
  price     Int
  storeId   Int?
  stock     Int
  imagePath String
  available Boolean
  Store     Store?     @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Item_storeId_fkey1")
  Purchase  Purchase[]
}

model Purchase {
  id         Int       @id @default(autoincrement())
  date       DateTime?
  totalPrice Int?
  memberId   Int
  itemId     Int
  Item       Item      @relation(fields: [itemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  member     Member    @relation(fields: [memberId], references: [id])
}

model UserCommunity {
  id          Int       @id @default(autoincrement())
  joinedAt    DateTime?
  userId      String
  communityId Int
  community   Community @relation(fields: [communityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model PointsMember {
  id       Int    @id @default(autoincrement())
  points   Int?
  memberId Int
  member   Member @relation(fields: [memberId], references: [id])
}
